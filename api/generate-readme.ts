import type { VercelRequest, VercelResponse } from "@vercel/node"
import { kv } from "@vercel/kv"
import { GoogleGenerativeAI } from "@google/generative-ai"
import dotenv from "dotenv"
dotenv.config()

const genAI = new GoogleGenerativeAI(process.env.GEMINI_API_KEY || "")
const model = genAI.getGenerativeModel({
  model: process.env.MODEL_NAME || "",
  systemInstruction: process.env.MODEL_INSTRUCTION || "",
})

const generationConfig = process.env.CONFIG_PAYLOAD ? JSON.parse(process.env.CONFIG_PAYLOAD) : {}

export default async (req: VercelRequest, res: VercelResponse) => {
  if (req.method !== "POST") {
    return res.status(405).json({ message: "Method not allowed" })
  }

  try {
    const { projectType, projectFiles, fullCode } = req.body
    if (!projectType || !projectFiles || !fullCode) {
      return res.status(400).json({ error: "Missing required fields in request body" })
    }

    const cacheKey = `readme:${projectType}:${fullCode.length}`
    const cachedReadme = await kv.get<string>(cacheKey)

    if (cachedReadme) {
      return res.status(200).json({ readme: cachedReadme })
    }

    const hasPackageJson = projectFiles.includes("package.json")
    const hasDockerfile = projectFiles.includes("Dockerfile")
    const hasDatabaseConfig = projectFiles.some(file => file.includes("db") || file.includes("database"))
    const hasApiRoutes = projectFiles.some(file => file.includes("routes") || file.includes("api"))

    const dependenciesSection = `
    ### Dependencies
    - ${hasPackageJson ? "Node.js (npm packages detected)" : ""}
    - ${hasDockerfile ? "Docker setup available" : ""}
    - ${hasDatabaseConfig ? "Database configuration detected" : ""}
    - ${hasApiRoutes ? "API endpoints present" : ""}
    `.trim()

    const chatSession = model.startChat({ generationConfig })
    const prompt = `
    You are an expert technical writer specializing in clear, concise, and professional README documentation. 

   Analyze the provided project files and generate a structured, developer-friendly **README.md** that includes:

    1. **Project Overview**: Clearly describe what the project does, its purpose, and its key features. Extract useful hints from the project name and structure.
    2. **Installation**: Provide a step-by-step installation guide based on the detected files. If package.json exists, include npm install instructions. If there's a Dockerfile, include Docker setup instructions.
    3. **Usage Guide**: Give a real-world usage example with relevant code snippets (if possible). If API routes exist, describe the endpoints.
    4. **Project Structure**: Provide a well-formatted explanation of key directories and files instead of just listing them.
    5. **Key Features**: Highlight the unique aspects of this project instead of generic placeholders.
    6. **Configuration (if applicable)**: Explain how environment variables work if a .env file is detected.
    7. **License**: Detect if a LICENSE file exists. If not, suggest MIT.

    ## **Project Overview**
    - **Name:** ${projectType}
    - **Description:** (Generate based on project structure)

    ## **Installation**
    ${hasPackageJson ? "Run `npm install` to install dependencies." : ""}
    ${hasDockerfile ? "Use `docker-compose up` to start the service." : ""}

    ## **Usage**
    ${hasApiRoutes ? "Refer to the API documentation for endpoints:" : "Provide a usage example based on available files."}

    ## **Project Structure**
    \`\`\`
   ${projectFiles.map(file => `- ${file}`).join("\n")}
    \`\`\`

    ## **Key Features**
    - (Extract features based on project structure)

    ## **License**
    Detect if a **LICENSE** file exists. If not, suggest MIT.

    "This README was automatically generated by Dokugen."
    `;

    const result = await chatSession.sendMessage(prompt)
    const readmeContent = result.response.text() || "README generation failed."
    await kv.set(cacheKey, readmeContent, { ex: 3600 })
    return res.status(200).json({ readme: readmeContent })
  } catch (error) {
    console.error("‚ùå Error generating README:", error)
    return res.status(500).json({ error: "Failed to generate README" })
  }
}